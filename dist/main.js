(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(15),o=n.n(r),a=n(645),l=n.n(a)()(o());l.push([e.id,"#todo-form,\r\n#label-form,\r\n#todo-list,\r\n#completed-list {\r\n\twidth: 100%;\r\n}\r\n\r\n#todo-form,\r\n#label-form {\r\n\tdisplay: none;\r\n}\r\n\r\nul {\r\n\tlist-style-type: none;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n}\r\n\r\n.completed {\r\n\ttext-decoration: line-through;\r\n}\r\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;;;CAIC,WAAW;AACZ;;AAEA;;CAEC,aAAa;AACd;;AAEA;CACC,qBAAqB;CACrB,SAAS;CACT,UAAU;AACX;;AAEA;CACC,6BAA6B;AAC9B",sourcesContent:["#todo-form,\r\n#label-form,\r\n#todo-list,\r\n#completed-list {\r\n\twidth: 100%;\r\n}\r\n\r\n#todo-form,\r\n#label-form {\r\n\tdisplay: none;\r\n}\r\n\r\nul {\r\n\tlist-style-type: none;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n}\r\n\r\n.completed {\r\n\ttext-decoration: line-through;\r\n}\r\n"],sourceRoot:""}]);const i=l},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(o[l]=!0)}for(var i=0;i<e.length;i++){var c=[].concat(e[i]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var r,o,a=[],l=!0,i=!1;try{for(n=n.call(e);!(l=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);l=!0);}catch(e){i=!0,o=e}finally{try{l||null==n.return||n.return()}finally{if(i)throw o}}return a}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],l=o[3];if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(l)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),u="/*# ".concat(c," */"),d=l.sources.map((function(e){return"/*# sourceURL=".concat(l.sourceRoot||"").concat(e," */")}));return[a].concat(d).concat([u]).join("\n")}return[a].join("\n")}},695:e=>{var t={};e.exports=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},l=[],i=0;i<e.length;i++){var c=e[i],u=r.base?c[0]+r.base:c[0],d=a[u]||0,s="".concat(u," ").concat(d);a[u]=d+1;var m=n(s),f={css:c[1],media:c[2],sourceMap:c[3]};-1!==m?(t[m].references++,t[m].updater(f)):t.push({identifier:s,updater:o(f,r),references:1}),l.push(s)}return l}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var l=0;l<a.length;l++){var i=n(a[l]);t[i].references--}for(var c=r(e,o),u=0;u<a.length;u++){var d=n(a[u]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=c}}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t),t}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),a=n(695),l=n.n(a),i=n(216),c=n.n(i),u=n(426),d={styleTagTransform:function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}},setAttributes:function(e){var t=n.nc;t&&e.setAttribute("nonce",t)},insert:function(e){var t=l()("head");if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}};d.domAPI=o(),d.insertStyleElement=c(),t()(u.Z,d),u.Z&&u.Z.locals&&u.Z.locals;let s=[],m=[s];s.name="Default";let f=document.getElementById("todo-form"),p=document.getElementById("label-form"),y=document.getElementById("title"),v=document.getElementById("description"),h=document.getElementById("due-date"),A=document.getElementById("priority"),b=document.getElementById("label"),g=document.getElementById("create"),C=document.getElementById("label-field"),E=document.getElementById("new-label"),I=document.getElementById("todo-list"),w=(document.getElementById("completed-list"),document.getElementById("show-todo-form")),B=document.getElementById("show-label-field"),x=document.getElementById("label-navigation");function k(e){x.innerHTML="",e.forEach((e=>{let t=document.createElement("li");t.innerHTML=e.name,x.appendChild(t)}))}function T(e){b.innerHTML="",e.forEach((e=>{let t=document.createElement("option");t.value=e.name,t.innerHTML=e.name,b.appendChild(t)}))}w.onclick=()=>{"block"==f.style.display?f.style.display="none":f.style.display="block"},B.onclick=()=>{"block"==p.style.display?p.style.display="none":p.style.display="block"},T(m),k(m),g.onclick=()=>{var e,t,n,r,o;e=y.value,t=v.value,n=h.value,r=A.value,o=b.value,m.forEach((a=>{if(o===a.name){let l=function(e,t,n,r,o){let a;return{title:e,description:t,dueDate:n,priority:r,label:o,getNote:function(){return a},setNote:function(e){a=e}}}(e,t,n,r,o);a.push(l)}})),function(e,t){let n=document.createElement("input");n.type="checkbox",n.value=e,n.classList.add("checkboxes-main"),n.onclick=()=>{n.checked?r.classList.add("completed"):(console.log(`${n.dataset.index} unchecked`),r.classList.remove("completed"))};let r=document.createElement("label");r.appendChild(document.createTextNode(e));let o=document.createElement("li");o.classList.add("todo-items"),o.appendChild(n),o.appendChild(r),I.appendChild(o)}(y.value,v.value),function(){let e=document.getElementsByClassName("checkboxes-main");for(let t=0;t<e.length;t++)[...e][t].setAttribute("data-index",`${t}`)}(),y.value=null,v.value=null,h.value=null,A.value="low"},E.onclick=()=>{var e;e=C.value,window[e]=[],window[e].name=e,m.push(window[e]),console.log(m),T(m),k(m),C.value=null}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLy4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFRhcmdldC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3RvZG8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9kby93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90b2RvL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90b2RvL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL2FwcC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL0RPTS5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvdG9kb0dlbmVyYXRvci5qcyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY29uY2F0Iiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJfaSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5IiwiX2l0ZW0iLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfcyIsIl9lIiwiX2FyciIsIl9uIiwiX2QiLCJjYWxsIiwibmV4dCIsImRvbmUiLCJ2YWx1ZSIsImVyciIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm8iLCJtaW5MZW4iLCJuIiwiT2JqZWN0IiwicHJvdG90eXBlIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwibWVtbyIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4Iiwib2JqIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZFN0eWxlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCIsInNwbGljZSIsInN0eWxlIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwiaW5zZXJ0IiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsImhhc093blByb3BlcnR5Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIm5vbmNlIiwiRXJyb3IiLCJ0b2Rvc0N1cnJlbnQiLCJ0b2RvVXNlckRlZmluZWQiLCJ0b2RvRm9ybSIsImdldEVsZW1lbnRCeUlkIiwibGFiZWxGb3JtIiwiZm9ybVRpdGxlIiwiZm9ybURlc2MiLCJmb3JtRGF0ZSIsImZvcm1Qcmlvcml0eSIsImZvcm1MYWJlbCIsImZvcm1CdXR0b24iLCJuZXdMYWJlbFRleHQiLCJuZXdMYWJlbEJ1dHRvbiIsInNob3dUb2RvRm9ybUJ1dHRvbiIsInNob3dMYWJlbEZvcm1CdXR0b24iLCJsYWJlbE5hdmlnYXRpb24iLCJzaG93TGlua0luTmF2IiwiaW5uZXJIVE1MIiwiZm9yRWFjaCIsImxpIiwiYWRkVmFsdWVzVG9MYWJlbE9wdGlvbiIsInVzZXJEZWZpbmUiLCJvcHRpb24iLCJvbmNsaWNrIiwiZGlzcGxheSIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJkdWVEYXRlIiwicHJpb3JpdHkiLCJsYWJlbCIsInRvZG8iLCJub3RlIiwiZ2V0Tm90ZSIsInNldE5vdGUiLCJfbm90ZSIsInRvZG9HZW5lcmF0b3IiLCJ0b2RvQ2hlY2tib3giLCJ0eXBlIiwiY2xhc3NMaXN0IiwiYWRkIiwiY2hlY2tlZCIsInRvZG9MYWJlbCIsImNvbnNvbGUiLCJsb2ciLCJkYXRhc2V0IiwidG9kb0NvbnRhaW5lciIsImFwcGVuZFRvZG9zVG9MaXN0IiwiY2hlY2tib3hlcyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJzZXRJbmRleENoZWNrQm94ZXNPbk1haW5MaXN0IiwibGFiZWxOYW1lIl0sIm1hcHBpbmdzIjoidUZBR0lBLEUsTUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCQyxLQUFLLENBQUNDLEVBQU9DLEdBQUkscVNBQXNTLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLDZCQUE2QixNQUFRLEdBQUcsU0FBVyxtSEFBbUgsZUFBaUIsQ0FBQyxzU0FBc1MsV0FBYSxNQUVyMUIsVyxRQ0NBRCxFQUFPRSxRQUFVLFNBQVVDLEdBQ3pCLElBQUlDLEVBQU8sR0F1RFgsT0FyREFBLEVBQUtDLFNBQVcsV0FDZCxPQUFPQyxLQUFLQyxLQUFJLFNBQVVDLEdBQ3hCLElBQUlDLEVBQVVOLEVBQXVCSyxHQUVyQyxPQUFJQSxFQUFLLEdBQ0EsVUFBVUUsT0FBT0YsRUFBSyxHQUFJLE1BQU1FLE9BQU9ELEVBQVMsS0FHbERBLEtBQ05FLEtBQUssS0FLVlAsRUFBS1EsRUFBSSxTQUFVQyxFQUFTQyxFQUFZQyxHQUNmLGlCQUFaRixJQUVUQSxF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QixJRWlCTHZDLEVBQWFuSCxNRmhCNUJrQyxPQUFPd0gsR0FBYSxHQUNwQnhILE9BQU93SCxHQUFXaEosS0FBT2dKLEVBQ3pCakQsRUFBZ0IvSSxLQUFLd0UsT0FBT3dILElBQzVCUixRQUFRQyxJQUFJMUMsR0VjWm1CLEVBQXVCbkIsR0FDdkJlLEVBQWNmLEdBQ2RVLEVBQWFuSCxNQUFRLE8iLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiI3RvZG8tZm9ybSxcXHJcXG4jbGFiZWwtZm9ybSxcXHJcXG4jdG9kby1saXN0LFxcclxcbiNjb21wbGV0ZWQtbGlzdCB7XFxyXFxuXFx0d2lkdGg6IDEwMCU7XFxyXFxufVxcclxcblxcclxcbiN0b2RvLWZvcm0sXFxyXFxuI2xhYmVsLWZvcm0ge1xcclxcblxcdGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbnVsIHtcXHJcXG5cXHRsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxyXFxuXFx0bWFyZ2luOiAwO1xcclxcblxcdHBhZGRpbmc6IDA7XFxyXFxufVxcclxcblxcclxcbi5jb21wbGV0ZWQge1xcclxcblxcdHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOzs7O0NBSUMsV0FBVztBQUNaOztBQUVBOztDQUVDLGFBQWE7QUFDZDs7QUFFQTtDQUNDLHFCQUFxQjtDQUNyQixTQUFTO0NBQ1QsVUFBVTtBQUNYOztBQUVBO0NBQ0MsNkJBQTZCO0FBQzlCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIiN0b2RvLWZvcm0sXFxyXFxuI2xhYmVsLWZvcm0sXFxyXFxuI3RvZG8tbGlzdCxcXHJcXG4jY29tcGxldGVkLWxpc3Qge1xcclxcblxcdHdpZHRoOiAxMDAlO1xcclxcbn1cXHJcXG5cXHJcXG4jdG9kby1mb3JtLFxcclxcbiNsYWJlbC1mb3JtIHtcXHJcXG5cXHRkaXNwbGF5OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG51bCB7XFxyXFxuXFx0bGlzdC1zdHlsZS10eXBlOiBub25lO1xcclxcblxcdG1hcmdpbjogMDtcXHJcXG5cXHRwYWRkaW5nOiAwO1xcclxcbn1cXHJcXG5cXHJcXG4uY29tcGxldGVkIHtcXHJcXG5cXHR0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfaSA9IGFyciAmJiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdKTsgaWYgKF9pID09IG51bGwpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfcywgX2U7IHRyeSB7IGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pIHtcbiAgdmFyIF9pdGVtID0gX3NsaWNlZFRvQXJyYXkoaXRlbSwgNCksXG4gICAgICBjb250ZW50ID0gX2l0ZW1bMV0sXG4gICAgICBjc3NNYXBwaW5nID0gX2l0ZW1bM107XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGFyZ2V0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKHN0eWxlLCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIHJldHVybiBzdHlsZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKFwibWVkaWFcIik7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGUsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBnZXRUYXJnZXQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRUYXJnZXQuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gZnVuY3Rpb24oY3NzLCBzdHlsZSl7XG4gICAgICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgICAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICAgIH1cbiAgfTtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IGZ1bmN0aW9uKHN0eWxlKSB7XG4gICAgICAgIHZhciBub25jZSA9XG4gICAgICAgICAgdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgICAgIGlmIChub25jZSkge1xuICAgICAgICAgIHN0eWxlLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbm9wdGlvbnMuaW5zZXJ0ID0gZnVuY3Rpb24oc3R5bGUpe1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoXCJoZWFkXCIpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB0b2RvR2VuZXJhdG9yIGZyb20gXCIuL3RvZG9HZW5lcmF0b3JcIlxyXG5cclxubGV0IHRvZG9zQ3VycmVudCA9IFtdO1xyXG5sZXQgdG9kb3NDb21wbGV0ZWQgPSBbXTtcclxubGV0IHRvZG9Vc2VyRGVmaW5lZCA9IFt0b2Rvc0N1cnJlbnRdO1xyXG5cclxudG9kb3NDdXJyZW50Lm5hbWUgPSBcIkRlZmF1bHRcIjtcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZU5ld1RvZG8odGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSwgbGFiZWwpIHtcclxuICAgIHRvZG9Vc2VyRGVmaW5lZC5mb3JFYWNoKGxpc3QgPT4ge1xyXG4gICAgICAgIGlmIChsYWJlbCA9PT0gbGlzdC5uYW1lKSB7XHJcbiAgICAgICAgICAgIGxldCB0b2RvID0gdG9kb0dlbmVyYXRvcih0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByaW9yaXR5LCBsYWJlbCk7XHJcbiAgICAgICAgICAgIGxpc3QucHVzaCh0b2RvKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0VG9Eb0FzQ29tcGxlbGV0ZWQodG9kb0luZGV4LCBjdXJyZW50TGlzdCwgY29tcGxldGVkTGlzdCkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50TGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChpID09IHRvZG9JbmRleCkge1xyXG4gICAgICAgICAgICBsZXQgdGVtcExpc3QgPSBjdXJyZW50TGlzdC5zcGxpY2UodG9kb0luZGV4LCAxKTtcclxuICAgICAgICAgICAgY29tcGxldGVkTGlzdC5wdXNoKHRlbXBMaXN0WzBdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZU5ld0xhYmVsKGxhYmVsTmFtZSkge1xyXG4gICAgd2luZG93W2xhYmVsTmFtZV0gPSBbXTtcclxuICAgIHdpbmRvd1tsYWJlbE5hbWVdLm5hbWUgPSBsYWJlbE5hbWU7XHJcbiAgICB0b2RvVXNlckRlZmluZWQucHVzaCh3aW5kb3dbbGFiZWxOYW1lXSk7XHJcbiAgICBjb25zb2xlLmxvZyh0b2RvVXNlckRlZmluZWQpO1xyXG59XHJcblxyXG5leHBvcnQge1xyXG4gICAgdG9kb3NDdXJyZW50LFxyXG4gICAgdG9kb3NDb21wbGV0ZWQsXHJcbiAgICB0b2RvVXNlckRlZmluZWQsXHJcbiAgICBjcmVhdGVOZXdUb2RvLFxyXG4gICAgc2V0VG9Eb0FzQ29tcGxlbGV0ZWQsXHJcbiAgICBjcmVhdGVOZXdMYWJlbFxyXG59IiwiaW1wb3J0IHtcclxuICAgIHNldFRvRG9Bc0NvbXBsZWxldGVkLFxyXG4gICAgdG9kb3NDdXJyZW50LFxyXG4gICAgdG9kb3NDb21wbGV0ZWRcclxufSBmcm9tIFwiLi9hcHBcIlxyXG5cclxubGV0IHRvZG9Gb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b2RvLWZvcm1cIik7XHJcbmxldCBsYWJlbEZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxhYmVsLWZvcm1cIik7XHJcbmxldCBmb3JtVGl0bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRpdGxlXCIpO1xyXG5sZXQgZm9ybURlc2MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRlc2NyaXB0aW9uXCIpO1xyXG5sZXQgZm9ybURhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImR1ZS1kYXRlXCIpO1xyXG5sZXQgZm9ybVByaW9yaXR5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcmlvcml0eVwiKTtcclxubGV0IGZvcm1MYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGFiZWxcIik7XHJcbmxldCBmb3JtQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjcmVhdGVcIik7XHJcbmxldCBuZXdMYWJlbFRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxhYmVsLWZpZWxkXCIpO1xyXG5sZXQgbmV3TGFiZWxCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5ldy1sYWJlbFwiKTtcclxubGV0IGxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvZG8tbGlzdFwiKTtcclxubGV0IGNvbXBsZXRlZExpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbXBsZXRlZC1saXN0XCIpO1xyXG5sZXQgc2hvd1RvZG9Gb3JtQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaG93LXRvZG8tZm9ybVwiKTtcclxubGV0IHNob3dMYWJlbEZvcm1CdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNob3ctbGFiZWwtZmllbGRcIik7XHJcbmxldCBsYWJlbE5hdmlnYXRpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxhYmVsLW5hdmlnYXRpb25cIik7XHJcblxyXG5zaG93VG9kb0Zvcm1CdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgIGlmICh0b2RvRm9ybS5zdHlsZS5kaXNwbGF5ID09IFwiYmxvY2tcIikge1xyXG4gICAgICAgIHRvZG9Gb3JtLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdG9kb0Zvcm0uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgIH1cclxufVxyXG5cclxuc2hvd0xhYmVsRm9ybUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgaWYgKGxhYmVsRm9ybS5zdHlsZS5kaXNwbGF5ID09IFwiYmxvY2tcIikge1xyXG4gICAgICAgIGxhYmVsRm9ybS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxhYmVsRm9ybS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBhcHBlbmRUb2Rvc1RvTGlzdCh0aXRsZSwgZGVzY3JpcHRpb24pIHtcclxuICAgIGxldCB0b2RvQ2hlY2tib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICB0b2RvQ2hlY2tib3gudHlwZSA9IFwiY2hlY2tib3hcIjtcclxuICAgIHRvZG9DaGVja2JveC52YWx1ZSA9IHRpdGxlO1xyXG4gICAgdG9kb0NoZWNrYm94LmNsYXNzTGlzdC5hZGQoXCJjaGVja2JveGVzLW1haW5cIik7XHJcblxyXG4gICAgdG9kb0NoZWNrYm94Lm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRvZG9DaGVja2JveC5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgIC8vIHNldFRvRG9Bc0NvbXBsZWxldGVkKHRvZG9DaGVja2JveC5kYXRhc2V0LmluZGV4LCB0b2Rvc0N1cnJlbnQsIHRvZG9zQ29tcGxldGVkKTtcclxuICAgICAgICAgICAgLy8gdG9kb0NoZWNrYm94LmNsYXNzTGlzdC5yZW1vdmUoXCJjaGVja2JveGVzLW1haW5cIik7XHJcbiAgICAgICAgICAgIC8vIHRvZG9Db250YWluZXIucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIC8vIHNldEluZGV4Q2hlY2tCb3hlc09uTWFpbkxpc3QoKTtcclxuICAgICAgICAgICAgLy8gc2hvd0NvbXBsZXRlZFRvZG9zKHRvZG9zQ29tcGxldGVkKTtcclxuICAgICAgICAgICAgdG9kb0xhYmVsLmNsYXNzTGlzdC5hZGQoXCJjb21wbGV0ZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgJHt0b2RvQ2hlY2tib3guZGF0YXNldC5pbmRleH0gdW5jaGVja2VkYCk7XHJcbiAgICAgICAgICAgIHRvZG9MYWJlbC5jbGFzc0xpc3QucmVtb3ZlKFwiY29tcGxldGVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgbGV0IHRvZG9MYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIHRvZG9MYWJlbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0aXRsZSkpO1xyXG5cclxuICAgIGxldCB0b2RvQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xyXG4gICAgdG9kb0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwidG9kby1pdGVtc1wiKTtcclxuXHJcbiAgICB0b2RvQ29udGFpbmVyLmFwcGVuZENoaWxkKHRvZG9DaGVja2JveCk7XHJcbiAgICB0b2RvQ29udGFpbmVyLmFwcGVuZENoaWxkKHRvZG9MYWJlbCk7XHJcbiAgICBsaXN0LmFwcGVuZENoaWxkKHRvZG9Db250YWluZXIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzaG93Q29tcGxldGVkVG9kb3MobGlzdCkge1xyXG4gICAgY29tcGxldGVkTGlzdC5pbm5lckhUTUwgPSBcIlwiO1xyXG5cclxuICAgIGxpc3QuZm9yRWFjaCh0b2RvID0+IHtcclxuICAgICAgICBsZXQgdG9kb0NoZWNrYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgICAgIHRvZG9DaGVja2JveC50eXBlID0gXCJjaGVja2JveFwiO1xyXG4gICAgICAgIHRvZG9DaGVja2JveC52YWx1ZSA9IHRvZG8udGl0bGU7XHJcbiAgICAgICAgdG9kb0NoZWNrYm94LmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIC8vIHRvZG9DaGVja2JveC5kaXNhYmxlZCA9IHRydWU7XHJcblxyXG4gICAgICAgIGxldCB0b2RvTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICAgICAgdG9kb0xhYmVsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRvZG8udGl0bGUpKTtcclxuICAgICAgICB0b2RvTGFiZWwuY2xhc3NMaXN0LmFkZChcImNvbXBsZXRlZFwiKTtcclxuXHJcbiAgICAgICAgbGV0IHRvZG9Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XHJcbiAgICAgICAgdG9kb0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiY29tcGxldGVkLXRvZG8taXRlbXNcIik7XHJcblxyXG4gICAgICAgIHRvZG9Db250YWluZXIuYXBwZW5kQ2hpbGQodG9kb0NoZWNrYm94KTtcclxuICAgICAgICB0b2RvQ29udGFpbmVyLmFwcGVuZENoaWxkKHRvZG9MYWJlbCk7XHJcbiAgICAgICAgY29tcGxldGVkTGlzdC5hcHBlbmRDaGlsZCh0b2RvQ29udGFpbmVyKTtcclxuICAgIH0pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dMaW5rSW5OYXYobGlzdCkge1xyXG4gICAgbGFiZWxOYXZpZ2F0aW9uLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICBsaXN0LmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgbGV0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xyXG4gICAgICAgIGxpLmlubmVySFRNTCA9IGl0ZW0ubmFtZTtcclxuICAgICAgICBsYWJlbE5hdmlnYXRpb24uYXBwZW5kQ2hpbGQobGkpO1xyXG4gICAgfSlcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkVmFsdWVzVG9MYWJlbE9wdGlvbih1c2VyRGVmaW5lKSB7XHJcbiAgICBmb3JtTGFiZWwuaW5uZXJIVE1MID0gXCJcIjtcclxuXHJcbiAgICB1c2VyRGVmaW5lLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgbGV0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XHJcbiAgICAgICAgb3B0aW9uLnZhbHVlID0gaXRlbS5uYW1lO1xyXG4gICAgICAgIG9wdGlvbi5pbm5lckhUTUwgPSBpdGVtLm5hbWU7XHJcbiAgICAgICAgZm9ybUxhYmVsLmFwcGVuZENoaWxkKG9wdGlvbik7XHJcbiAgICB9KVxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRJbmRleENoZWNrQm94ZXNPbk1haW5MaXN0KCkge1xyXG4gICAgbGV0IGNoZWNrYm94ZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiY2hlY2tib3hlcy1tYWluXCIpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGVja2JveGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgWy4uLmNoZWNrYm94ZXNdW2ldLnNldEF0dHJpYnV0ZShcImRhdGEtaW5kZXhcIiwgYCR7aX1gKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVzZXRGb3JtVmFsdWUoKSB7XHJcbiAgICBmb3JtVGl0bGUudmFsdWUgPSBudWxsO1xyXG4gICAgZm9ybURlc2MudmFsdWUgPSBudWxsO1xyXG4gICAgZm9ybURhdGUudmFsdWUgPSBudWxsO1xyXG4gICAgZm9ybVByaW9yaXR5LnZhbHVlID0gXCJsb3dcIjtcclxufVxyXG5cclxuZXhwb3J0IHtcclxuICAgIGZvcm1UaXRsZSxcclxuICAgIGZvcm1EZXNjLFxyXG4gICAgZm9ybURhdGUsXHJcbiAgICBmb3JtUHJpb3JpdHksXHJcbiAgICBmb3JtTGFiZWwsXHJcbiAgICBmb3JtQnV0dG9uLFxyXG4gICAgbmV3TGFiZWxUZXh0LFxyXG4gICAgbmV3TGFiZWxCdXR0b24sXHJcbiAgICBhcHBlbmRUb2Rvc1RvTGlzdCxcclxuICAgIHNob3dDb21wbGV0ZWRUb2RvcyxcclxuICAgIGFkZFZhbHVlc1RvTGFiZWxPcHRpb24sXHJcbiAgICByZXNldEZvcm1WYWx1ZSxcclxuICAgIHNldEluZGV4Q2hlY2tCb3hlc09uTWFpbkxpc3QsXHJcbiAgICBzaG93TGlua0luTmF2XHJcbn07IiwiaW1wb3J0IFwiLi9zdHlsZS5jc3NcIlxyXG5cclxuaW1wb3J0IHtcclxuICAgIHRvZG9zQ3VycmVudCxcclxuICAgIHRvZG9zQ29tcGxldGVkLFxyXG4gICAgY3JlYXRlTmV3VG9kbyxcclxuICAgIGNyZWF0ZU5ld0xhYmVsLFxyXG4gICAgdG9kb1VzZXJEZWZpbmVkXHJcbn0gZnJvbSBcIi4vYXBwXCI7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgZm9ybUJ1dHRvbixcclxuICAgIGZvcm1UaXRsZSxcclxuICAgIGZvcm1EZXNjLFxyXG4gICAgZm9ybURhdGUsXHJcbiAgICBmb3JtUHJpb3JpdHksXHJcbiAgICBmb3JtTGFiZWwsXHJcbiAgICBuZXdMYWJlbFRleHQsXHJcbiAgICBuZXdMYWJlbEJ1dHRvbixcclxuICAgIGFwcGVuZFRvZG9zVG9MaXN0LFxyXG4gICAgcmVzZXRGb3JtVmFsdWUsXHJcbiAgICBzZXRJbmRleENoZWNrQm94ZXNPbk1haW5MaXN0LFxyXG4gICAgYWRkVmFsdWVzVG9MYWJlbE9wdGlvbixcclxuICAgIHNob3dMaW5rSW5OYXZcclxufSBmcm9tIFwiLi9ET01cIjtcclxuXHJcbmFkZFZhbHVlc1RvTGFiZWxPcHRpb24odG9kb1VzZXJEZWZpbmVkKTtcclxuc2hvd0xpbmtJbk5hdih0b2RvVXNlckRlZmluZWQpO1xyXG5cclxuZm9ybUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgY3JlYXRlTmV3VG9kbyhcclxuICAgICAgICBmb3JtVGl0bGUudmFsdWUsXHJcbiAgICAgICAgZm9ybURlc2MudmFsdWUsXHJcbiAgICAgICAgZm9ybURhdGUudmFsdWUsXHJcbiAgICAgICAgZm9ybVByaW9yaXR5LnZhbHVlLFxyXG4gICAgICAgIGZvcm1MYWJlbC52YWx1ZVxyXG4gICAgKVxyXG4gICAgYXBwZW5kVG9kb3NUb0xpc3QoZm9ybVRpdGxlLnZhbHVlLCBmb3JtRGVzYy52YWx1ZSk7XHJcbiAgICBzZXRJbmRleENoZWNrQm94ZXNPbk1haW5MaXN0KCk7XHJcbiAgICByZXNldEZvcm1WYWx1ZSgpO1xyXG59O1xyXG5cclxubmV3TGFiZWxCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgIGNyZWF0ZU5ld0xhYmVsKG5ld0xhYmVsVGV4dC52YWx1ZSk7XHJcbiAgICBhZGRWYWx1ZXNUb0xhYmVsT3B0aW9uKHRvZG9Vc2VyRGVmaW5lZCk7XHJcbiAgICBzaG93TGlua0luTmF2KHRvZG9Vc2VyRGVmaW5lZCk7XHJcbiAgICBuZXdMYWJlbFRleHQudmFsdWUgPSBudWxsO1xyXG59XHJcblxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b2RvR2VuZXJhdG9yKHRpdGxlLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgcHJpb3JpdHksIGxhYmVsKSB7XHJcbiAgICBsZXQgbm90ZTtcclxuICAgIGxldCBjb21wbGV0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICBmdW5jdGlvbiBnZXROb3RlKCkge1xyXG4gICAgICAgIHJldHVybiBub3RlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNldE5vdGUoX25vdGUpIHtcclxuICAgICAgICBub3RlID0gX25vdGU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHsgdGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSwgbGFiZWwsIGdldE5vdGUsIHNldE5vdGUgfTtcclxufSJdLCJzb3VyY2VSb290IjoiIn0=