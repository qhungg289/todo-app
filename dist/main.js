(()=>{var n={426:(n,t,r)=>{"use strict";r.d(t,{Z:()=>i});var e=r(15),o=r.n(e),a=r(645),A=r.n(a)()(o());A.push([n.id,'.completed {\r\n\ttext-decoration: line-through;\r\n\topacity: 0.8;\r\n}\r\n\r\nbody {\r\n\tfont-family: "Montserrat", sans-serif;\r\n}\r\n\r\nh1 {\r\n\tfont-size: 4rem;\r\n}\r\n\r\n#new-note,\r\n#new-tag,\r\n#show-control {\r\n\tposition: absolute;\r\n}\r\n\r\n#new-note-btn,\r\n#new-tag-btn,\r\n#show-control {\r\n\tbackground-color: red;\r\n\tborder: none;\r\n\tborder-radius: 50%;\r\n\tcolor: white;\r\n\tline-height: 0;\r\n\tcursor: pointer;\r\n\ttransition: 0.9s;\r\n}\r\n\r\n#show-control {\r\n\theight: 4rem;\r\n\twidth: 4rem;\r\n\tright: 1rem;\r\n\tbottom: 1rem;\r\n\tfont-size: 1.5rem;\r\n\tz-index: 10;\r\n\tbackground-position: center;\r\n\ttransition: 0.9s;\r\n}\r\n\r\n#show-control:focus,\r\n#show-control:hover {\r\n\tbackground-color: #ff5252;\r\n}\r\n\r\n#new-note-btn,\r\n#new-tag-btn {\r\n\theight: 3rem;\r\n\twidth: 3rem;\r\n\tmargin-left: 0.5rem;\r\n\tfont-size: 1rem;\r\n}\r\n\r\n#new-note,\r\n#new-tag {\r\n\tdisplay: flex;\r\n\tright: 1.5rem;\r\n\tbottom: 1.5rem;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\ttransition: 0.5s;\r\n}\r\n\r\n.new-note-move-up {\r\n\ttransform: translateY(-5rem);\r\n}\r\n\r\n.new-tag-move-up {\r\n\ttransform: translateY(-9.5rem);\r\n}\r\n\r\n#new-note p,\r\n#new-tag p {\r\n\topacity: 0;\r\n\tfont-weight: 600;\r\n\ttransition: 0.2s;\r\n}\r\n\r\n.show-up {\r\n\topacity: 1;\r\n}\r\n\r\n.modal {\r\n\tposition: fixed;\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n\ttransform: translate(-50%, -50%) scale(0);\r\n\ttransition: 0.4s;\r\n\tborder: 2px solid black;\r\n\tborder-radius: 4px;\r\n\tz-index: 20;\r\n\tbackground-color: white;\r\n\twidth: 500px;\r\n\tmax-width: 60%;\r\n}\r\n\r\n.modal.active {\r\n\ttransform: translate(-50%, -50%) scale(1);\r\n}\r\n\r\n.modal-header {\r\n\tpadding: 10px 15px;\r\n\tdisplay: flex;\r\n\tjustify-content: space-between;\r\n\talign-items: center;\r\n}\r\n\r\n.modal-header .close-btn {\r\n\tcursor: pointer;\r\n\tborder: none;\r\n\toutline: none;\r\n\tbackground: none;\r\n\tfont-size: 1.5rem;\r\n}\r\n\r\n.modal-body {\r\n\tpadding: 10px 15px;\r\n}\r\n\r\n#overlay {\r\n\tposition: fixed;\r\n\topacity: 0;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\tbackground-color: rgba(0, 0, 0, 0.5);\r\n\tpointer-events: none;\r\n\ttransition: 0.4s;\r\n\tz-index: 15;\r\n}\r\n\r\n#overlay.active {\r\n\topacity: 1;\r\n\tpointer-events: all;\r\n}\r\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;CACC,6BAA6B;CAC7B,YAAY;AACb;;AAEA;CACC,qCAAqC;AACtC;;AAEA;CACC,eAAe;AAChB;;AAEA;;;CAGC,kBAAkB;AACnB;;AAEA;;;CAGC,qBAAqB;CACrB,YAAY;CACZ,kBAAkB;CAClB,YAAY;CACZ,cAAc;CACd,eAAe;CACf,gBAAgB;AACjB;;AAEA;CACC,YAAY;CACZ,WAAW;CACX,WAAW;CACX,YAAY;CACZ,iBAAiB;CACjB,WAAW;CACX,2BAA2B;CAC3B,gBAAgB;AACjB;;AAEA;;CAEC,yBAAyB;AAC1B;;AAEA;;CAEC,YAAY;CACZ,WAAW;CACX,mBAAmB;CACnB,eAAe;AAChB;;AAEA;;CAEC,aAAa;CACb,aAAa;CACb,cAAc;CACd,uBAAuB;CACvB,mBAAmB;CACnB,gBAAgB;AACjB;;AAEA;CACC,4BAA4B;AAC7B;;AAEA;CACC,8BAA8B;AAC/B;;AAEA;;CAEC,UAAU;CACV,gBAAgB;CAChB,gBAAgB;AACjB;;AAEA;CACC,UAAU;AACX;;AAEA;CACC,eAAe;CACf,QAAQ;CACR,SAAS;CACT,yCAAyC;CACzC,gBAAgB;CAChB,uBAAuB;CACvB,kBAAkB;CAClB,WAAW;CACX,uBAAuB;CACvB,YAAY;CACZ,cAAc;AACf;;AAEA;CACC,yCAAyC;AAC1C;;AAEA;CACC,kBAAkB;CAClB,aAAa;CACb,8BAA8B;CAC9B,mBAAmB;AACpB;;AAEA;CACC,eAAe;CACf,YAAY;CACZ,aAAa;CACb,gBAAgB;CAChB,iBAAiB;AAClB;;AAEA;CACC,kBAAkB;AACnB;;AAEA;CACC,eAAe;CACf,UAAU;CACV,MAAM;CACN,OAAO;CACP,QAAQ;CACR,SAAS;CACT,oCAAoC;CACpC,oBAAoB;CACpB,gBAAgB;CAChB,WAAW;AACZ;;AAEA;CACC,UAAU;CACV,mBAAmB;AACpB",sourcesContent:['.completed {\r\n\ttext-decoration: line-through;\r\n\topacity: 0.8;\r\n}\r\n\r\nbody {\r\n\tfont-family: "Montserrat", sans-serif;\r\n}\r\n\r\nh1 {\r\n\tfont-size: 4rem;\r\n}\r\n\r\n#new-note,\r\n#new-tag,\r\n#show-control {\r\n\tposition: absolute;\r\n}\r\n\r\n#new-note-btn,\r\n#new-tag-btn,\r\n#show-control {\r\n\tbackground-color: red;\r\n\tborder: none;\r\n\tborder-radius: 50%;\r\n\tcolor: white;\r\n\tline-height: 0;\r\n\tcursor: pointer;\r\n\ttransition: 0.9s;\r\n}\r\n\r\n#show-control {\r\n\theight: 4rem;\r\n\twidth: 4rem;\r\n\tright: 1rem;\r\n\tbottom: 1rem;\r\n\tfont-size: 1.5rem;\r\n\tz-index: 10;\r\n\tbackground-position: center;\r\n\ttransition: 0.9s;\r\n}\r\n\r\n#show-control:focus,\r\n#show-control:hover {\r\n\tbackground-color: #ff5252;\r\n}\r\n\r\n#new-note-btn,\r\n#new-tag-btn {\r\n\theight: 3rem;\r\n\twidth: 3rem;\r\n\tmargin-left: 0.5rem;\r\n\tfont-size: 1rem;\r\n}\r\n\r\n#new-note,\r\n#new-tag {\r\n\tdisplay: flex;\r\n\tright: 1.5rem;\r\n\tbottom: 1.5rem;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\ttransition: 0.5s;\r\n}\r\n\r\n.new-note-move-up {\r\n\ttransform: translateY(-5rem);\r\n}\r\n\r\n.new-tag-move-up {\r\n\ttransform: translateY(-9.5rem);\r\n}\r\n\r\n#new-note p,\r\n#new-tag p {\r\n\topacity: 0;\r\n\tfont-weight: 600;\r\n\ttransition: 0.2s;\r\n}\r\n\r\n.show-up {\r\n\topacity: 1;\r\n}\r\n\r\n.modal {\r\n\tposition: fixed;\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n\ttransform: translate(-50%, -50%) scale(0);\r\n\ttransition: 0.4s;\r\n\tborder: 2px solid black;\r\n\tborder-radius: 4px;\r\n\tz-index: 20;\r\n\tbackground-color: white;\r\n\twidth: 500px;\r\n\tmax-width: 60%;\r\n}\r\n\r\n.modal.active {\r\n\ttransform: translate(-50%, -50%) scale(1);\r\n}\r\n\r\n.modal-header {\r\n\tpadding: 10px 15px;\r\n\tdisplay: flex;\r\n\tjustify-content: space-between;\r\n\talign-items: center;\r\n}\r\n\r\n.modal-header .close-btn {\r\n\tcursor: pointer;\r\n\tborder: none;\r\n\toutline: none;\r\n\tbackground: none;\r\n\tfont-size: 1.5rem;\r\n}\r\n\r\n.modal-body {\r\n\tpadding: 10px 15px;\r\n}\r\n\r\n#overlay {\r\n\tposition: fixed;\r\n\topacity: 0;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\tbackground-color: rgba(0, 0, 0, 0.5);\r\n\tpointer-events: none;\r\n\ttransition: 0.4s;\r\n\tz-index: 15;\r\n}\r\n\r\n#overlay.active {\r\n\topacity: 1;\r\n\tpointer-events: all;\r\n}\r\n'],sourceRoot:""}]);const i=A},645:n=>{"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var r=n(t);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(n,r,e){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(e)for(var a=0;a<this.length;a++){var A=this[a][0];null!=A&&(o[A]=!0)}for(var i=0;i<n.length;i++){var s=[].concat(n[i]);e&&o[s[0]]||(r&&(s[2]?s[2]="".concat(r," and ").concat(s[2]):s[2]=r),t.push(s))}},t}},15:n=>{"use strict";function t(n,t){(null==t||t>n.length)&&(t=n.length);for(var r=0,e=new Array(t);r<t;r++)e[r]=n[r];return e}n.exports=function(n){var r,e,o=(e=4,function(n){if(Array.isArray(n))return n}(r=n)||function(n,t){var r=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=r){var e,o,a=[],A=!0,i=!1;try{for(r=r.call(n);!(A=(e=r.next()).done)&&(a.push(e.value),!t||a.length!==t);A=!0);}catch(n){i=!0,o=n}finally{try{A||null==r.return||r.return()}finally{if(i)throw o}}return a}}(r,e)||function(n,r){if(n){if("string"==typeof n)return t(n,r);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?t(n,r):void 0}}(r,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],A=o[3];if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(A)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),c="/*# ".concat(s," */"),l=A.sources.map((function(n){return"/*# sourceURL=".concat(A.sourceRoot||"").concat(n," */")}));return[a].concat(l).concat([c]).join("\n")}return[a].join("\n")}},695:n=>{"use strict";var t={};n.exports=function(n){if(void 0===t[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}t[n]=r}return t[n]}},379:n=>{"use strict";var t=[];function r(n){for(var r=-1,e=0;e<t.length;e++)if(t[e].identifier===n){r=e;break}return r}function e(n,e){for(var a={},A=[],i=0;i<n.length;i++){var s=n[i],c=e.base?s[0]+e.base:s[0],l=a[c]||0,C="".concat(c," ").concat(l);a[c]=l+1;var u=r(C),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(t[u].references++,t[u].updater(d)):t.push({identifier:C,updater:o(d,e),references:1}),A.push(C)}return A}function o(n,t){var r=t.domAPI(t);return r.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;r.update(n=t)}else r.remove()}}n.exports=function(n,o){var a=e(n=n||[],o=o||{});return function(n){n=n||[];for(var A=0;A<a.length;A++){var i=r(a[A]);t[i].references--}for(var s=e(n,o),c=0;c<a.length;c++){var l=r(a[c]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=s}}},216:n=>{"use strict";n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t),t}},795:n=>{"use strict";n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(r){!function(n,t,r){var e=r.css,o=r.media,a=r.sourceMap;o?n.setAttribute("media",o):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(e,n)}(t,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},340:()=>{let n=document.getElementById("show-control"),t=document.getElementById("new-note-btn-label"),r=document.getElementById("new-tag-btn-label"),e=document.getElementById("new-note"),o=document.getElementById("new-tag"),a=document.getElementById("new-note-btn"),A=(document.getElementById("new-tag-btn"),document.getElementById("overlay")),i=document.getElementsByClassName("close-btn")[0];function s(n){null!=n&&(n.classList.remove("active"),A.classList.remove("active"))}n.onfocus=()=>{e.classList.add("new-note-move-up"),o.classList.add("new-tag-move-up"),t.style.opacity=1,r.style.opacity=1},n.onblur=()=>{e.classList.remove("new-note-move-up"),o.classList.remove("new-tag-move-up"),t.style.opacity=0,r.style.opacity=0},A.onclick=()=>{document.querySelectorAll(".modal.active").forEach((n=>{s(n)}))},a.onclick=()=>{var n;null!=(n=document.getElementById("new-note-modal"))&&(n.classList.add("active"),A.classList.add("active"))},i.onclick=()=>{s(document.getElementById("new-note-modal"))}}},t={};function r(e){var o=t[e];if(void 0!==o)return o.exports;var a=t[e]={id:e,exports:{}};return n[e](a,a.exports,r),a.exports}r.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return r.d(t,{a:t}),t},r.d=(n,t)=>{for(var e in t)r.o(t,e)&&!r.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:t[e]})},r.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{"use strict";var n=r(379),t=r.n(n),e=r(795),o=r.n(e),a=r(695),A=r.n(a),i=r(216),s=r.n(i),c=r(426),l={styleTagTransform:function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}},setAttributes:function(n){var t=r.nc;t&&n.setAttribute("nonce",t)},insert:function(n){var t=A()("head");if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(n)}};l.domAPI=o(),l.insertStyleElement=s(),t()(c.Z,l),c.Z&&c.Z.locals&&c.Z.locals,r(340)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,