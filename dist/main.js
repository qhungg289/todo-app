(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(15),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,"body {\r\n\tdisplay: flex;\r\n\tflex-direction: row;\r\n}\r\n\r\n#todo-form,\r\n#todo-list,\r\n#completed-list {\r\n\twidth: 33%;\r\n}\r\n\r\n#todo-form,\r\n#todo-list {\r\n\tborder-right: 3px solid black;\r\n}\r\n\r\n.completed {\r\n\ttext-decoration: line-through;\r\n}\r\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,mBAAmB;AACpB;;AAEA;;;CAGC,UAAU;AACX;;AAEA;;CAEC,6BAA6B;AAC9B;;AAEA;CACC,6BAA6B;AAC9B",sourcesContent:["body {\r\n\tdisplay: flex;\r\n\tflex-direction: row;\r\n}\r\n\r\n#todo-form,\r\n#todo-list,\r\n#completed-list {\r\n\twidth: 33%;\r\n}\r\n\r\n#todo-form,\r\n#todo-list {\r\n\tborder-right: 3px solid black;\r\n}\r\n\r\n.completed {\r\n\ttext-decoration: line-through;\r\n}\r\n"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);r&&o[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),d="/*# ".concat(l," */"),u=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(u).concat([d]).join("\n")}return[a].join("\n")}},695:e=>{var t={};e.exports=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var l=e[c],d=r.base?l[0]+r.base:l[0],u=a[d]||0,s="".concat(d," ").concat(u);a[d]=u+1;var m=n(s),p={css:l[1],media:l[2],sourceMap:l[3]};-1!==m?(t[m].references++,t[m].updater(p)):t.push({identifier:s,updater:o(p,r),references:1}),i.push(s)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=n(a[i]);t[c].references--}for(var l=r(e,o),d=0;d<a.length;d++){var u=n(a[d]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}a=l}}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t),t}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),a=n(695),i=n.n(a),c=n(216),l=n.n(c),d=n(426),u={styleTagTransform:function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}},setAttributes:function(e){var t=n.nc;t&&e.setAttribute("nonce",t)},insert:function(e){var t=i()("head");if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}};u.domAPI=o(),u.insertStyleElement=l(),t()(d.Z,u),d.Z&&d.Z.locals&&d.Z.locals;let s=[],m=[],p=[s];s.name="Default";let f=document.getElementById("title"),v=document.getElementById("description"),h=document.getElementById("due-date"),y=document.getElementById("priority"),A=document.getElementById("label"),b=document.getElementById("create"),g=document.getElementById("label-field"),C=document.getElementById("new-label"),x=document.getElementById("todo-list"),E=document.getElementById("completed-list");function w(e){A.innerHTML="",e.forEach((e=>{let t=document.createElement("option");t.value=e.name,t.innerHTML=e.name,A.appendChild(t)}))}function B(){let e=document.getElementsByClassName("checkboxes-main");for(let t=0;t<e.length;t++)[...e][t].setAttribute("data-index",`${t}`)}w(p),b.onclick=()=>{!function(e,t,n,r,o){let a=function(e,t,n,r,o){let a;return{title:e,description:t,dueDate:n,priority:r,label:void 0,getNote:function(){return a},setNote:function(e){a=e}}}(t,n,r,o);e.push(a)}(s,f.value,v.value,h.value,y.value),function(e,t){let n=document.createElement("input");n.type="checkbox",n.value=e,n.classList.add("checkboxes-main"),n.onclick=()=>{n.checked&&(console.log(`${n.dataset.index} checked`),function(e,t,n){for(let r=0;r<t.length;r++)if(r==e){let r=t.splice(e,1);n.push(r[0]),console.log(n),console.log(t)}}(n.dataset.index,s,m),n.classList.remove("checkboxes-main"),o.remove(),B(),function(e){E.innerHTML="",e.forEach((e=>{let t=document.createElement("input");t.type="checkbox",t.value=e.title,t.checked=!0;let n=document.createElement("label");n.appendChild(document.createTextNode(e.title)),n.classList.add("completed");let r=document.createElement("div");r.classList.add("completed-todo-items"),r.appendChild(t),r.appendChild(n),E.appendChild(r)}))}(m))};let r=document.createElement("label");r.appendChild(document.createTextNode(e));let o=document.createElement("div");o.classList.add("todo-items"),o.appendChild(n),o.appendChild(r),x.appendChild(o)}(f.value,v.value),B(),f.value=null,v.value=null,h.value=null,y.value="low"},C.onclick=()=>{var e;e=g.value,window[e]=[],window[e].name=e,console.log(p),p.push(window[e]),w(p),g.value=null}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,